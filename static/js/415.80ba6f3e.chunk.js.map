{"version":3,"file":"static/js/415.80ba6f3e.chunk.js","mappings":"+QAGMA,EAAU,mCAIhB,SAASC,EAAT,EAA6CC,GAAS,IAAD,EAA5BC,EAA4B,EAA5BA,QAAYC,GAAgB,sBAC9BD,GAD8B,IACnD,2BAA8B,CAAC,IAApBE,EAAmB,QAC5BA,EAAOC,UAAYD,EAAOE,UAAUC,KAAI,SAAAC,GAAI,OAAIP,EAAOQ,MAAK,SAAAC,GAAK,OAAKA,EAAMC,KAAOH,CAAlB,IAAwBI,IAA7C,GAC7C,CAHkD,+BAInD,OAAO,QAAC,UAAIT,GAAZ,IAAmBD,QAAAA,GACpB,CAPDW,IAAAA,SAAAA,QAHgB,+BAUf,sDAEKC,EAAAA,WAgBJ,cAAgB,kIACZ,OAAAC,KAAA,MAAoB,MACpB,OAAAA,KAAA,MAAoB,EAEpBA,KAAKC,YAAYC,mBACpB,CAlBD,OAkBC,8EAGD,oGACyBJ,IAAAA,IAAA,sBAAiC,CACtDK,OAAQ,CACNC,QAASpB,EACTqB,SAAU,KACVC,MAAK,OAACN,KAAF,SALV,cACQO,EADR,yBAQStB,EAAcsB,EAASC,KAAMT,EAAUb,SARhD,kGAHC,IAGD,+DAWA,WAAqBU,GAArB,uFACyBE,IAAAA,IAAA,iBAAoBF,GAAM,CAC/CO,OAAQ,CACNC,QAASpB,EACTqB,SAAU,QAJhB,cACQE,EADR,yBAOSA,EAASC,MAPlB,8FAXA,IAWA,gEAUA,oGACyBV,IAAAA,IAAA,iBAA4B,CACjDK,OAAQ,CACNC,QAASpB,EACTqB,SAAU,KACVI,OAAM,OAACT,KAAF,MACLM,MAAK,OAACN,KAAF,SANV,cACQO,EADR,yBASStB,EAAcsB,EAASC,KAAMT,EAAUb,SAThD,kGAVA,IAUA,mEAYF,WAAyBU,GAAzB,uFACyBE,IAAAA,IAAA,iBAAoBF,EAApB,WAAiC,CACtDO,OAAQ,CACNC,QAASpB,EACTqB,SAAU,QAJhB,cACQE,EADR,yBAOSA,EAASC,MAPlB,8FAZE,IAYF,oEAUA,WAA0BZ,GAA1B,uFACyBE,IAAAA,IAAA,iBAAoBF,EAApB,YAAkC,CACvDO,OAAQ,CACNC,QAASpB,EACTqB,SAAU,QAJhB,cACQE,EADR,yBAOSA,EAASC,MAPlB,8FAVA,IAUA,iBAaE,WACE,OAAO,OAAAR,KAAP,KACD,MAED,SAAUU,IACR,OAAAV,KAAA,MAAoBU,GACpB,OAAAV,KAAA,MAAoB,CACrB,yBAED,YACE,OAAAA,KAAA,OAAqB,CACtB,6BAED,YACQ,OAAAA,KAAA,MAAoB,KAI1B,OAAAA,KAAA,OAAqB,EACtB,0BAED,WACE,OAAO,OAAAA,KAAP,KACD,MAED,SAAgBW,IACd,OAAAX,KAAA,MAAoBW,CACrB,qBAED,WACE,OAAOZ,EAAUb,MAClB,MAED,SAAYS,GAEX,uEAhHD,oGAC2BG,IAAAA,IAAU,oBAAqB,CACpDK,OAAQ,CACNC,QAASpB,KAHjB,OACUuB,EADV,OAMIP,KAAKd,OAASqB,EAASC,KAAKtB,OANhC,kGAgHC,MAhHD,EAHIa,GAAAA,EAEGb,OAAS,KAsHlB,K,4FClGA,UA9Ba,WAEX,IAAM0B,GAAWC,EAAAA,EAAAA,MACjB,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KAUA,OANAC,EAAAA,EAAAA,YAAU,WACRlB,EAAAA,EAAAA,oBAAAA,KAAmCiB,EACpC,GAAE,KAKD,0BACGD,EAAOG,OAAS,IACf,iCACA,4CACA,wBACGH,EAAOvB,KAAI,SAAA2B,GAAK,OACf,gCACM,SAAC,KAAD,CAAMC,GAAE,UAAKD,EAAMvB,IAAMyB,MAAO,CAAEC,KAAMV,GAAxC,SAAqDO,EAAMtB,SADxDsB,EAAMvB,GADA,UAS1B,C","sources":["fakeApi.jsx","pages/Home.jsx"],"sourcesContent":["\nimport axios from \"axios\";\nconst API_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'a620a6416fb18e40f7d335c64c3f9e0e';\n\naxios.defaults.baseURL = API_URL;\n\nfunction handlerGenres ({results, ...other}, genres) {\n  for (const object of results) {\n    object.genre_str = object.genre_ids.map(elem => genres.find(genre =>  genre.id === elem).name);\n  }\n  return ({...other, results})\n}\n\nclass MoviesApi{\n\n  static genres = null;\n  static async fetchGendresMovie() {\n      const response = await axios.get(\"/genre/movie/list\", {\n        params: {\n          api_key: API_KEY,\n        },\n      });\n      this.genres = response.data.genres;\n    }\n\n\n  #searchQuery;\n  #currentPage;\n\n  constructor () {\n      this.#searchQuery = null;\n      this.#currentPage = 1;\n\n      this.constructor.fetchGendresMovie();\n  }\n\n\n  async fetchTrendDayMovies() {\n    const response = await axios.get(`/trending/movie/day`, {\n      params: {\n        api_key: API_KEY,\n        language: \"en\",\n        page: this.#currentPage,\n      },\n    });\n    return handlerGenres(response.data, MoviesApi.genres);\n  }\n\n  async fetchMovieByID(id) {\n    const response = await axios.get(`/movie/${id}`, {\n      params: {\n        api_key: API_KEY,\n        language: \"en\",\n      },\n    });\n    return response.data;\n  }\n\n  async fetchMovieQuery () {\n    const response = await axios.get(`/search/movie/`, {\n      params: {\n        api_key: API_KEY,\n        language: \"en\",\n        query: this.#searchQuery,\n        page: this.#currentPage,\n      },\n    });\n    return handlerGenres(response.data, MoviesApi.genres);\n  }\n\nasync fetchMovieByCredit(id) {\n  const response = await axios.get(`/movie/${id}/credit`, {\n    params: {\n      api_key: API_KEY,\n      language: \"en\",\n    },\n  });\n  return response.data;\n}\n\nasync fetchMovieByReviews(id) {\n  const response = await axios.get(`/movie/${id}/reviews`, {\n    params: {\n      api_key: API_KEY,\n      language: \"en\",\n    },\n  });\n  return response.data;\n}\n\n\n\n\n  get query() {\n    return this.#searchQuery\n  }\n\n  set query(newSearhQuery) {\n    this.#searchQuery = newSearhQuery;\n    this.#currentPage = 1;\n  }\n\n  nextPage() {\n    this.#currentPage += 1;\n  }\n\n  previousPage() {\n    if (!(this.#currentPage - 1)){\n      return\n    }\n    \n    this.#currentPage -= 1;\n  }\n\n  get currentpage() {\n    return this.#currentPage\n  }\n\n  set currentpage(newPage) {\n    this.#currentPage = newPage;\n  }\n\n  get genres() {\n    return MoviesApi.genres;\n  }\n\n  set genres (genre) {\n      return\n  }\n\n  \n}\n\nexport default MoviesApi;\n\n\n\n\n\n\n\n\n\n\n\n\n\n// ====================================================\n\n\n// import axios from \"axios\";\n// const API_URL = 'https://api.themoviedb.org/3';\n// const API_KEY = 'a620a6416fb18e40f7d335c64c3f9e0e';\n\n// const searchQuery = null;\n// const currentPage = 1;\n\n// axios.defaults.baseURL = API_URL;\n\n\n// // function handlerGenres ({results, ...other}, genres) {\n// //   for (const object of results) {\n// //     object.genre_str = object.genre_ids.map(elem => genres.find(genre =>  genre.id === elem).name);\n// //   }\n// //   return ({...other, results})\n// // }\n\n// function  fetchTrendDayMovies() {\n//   const response = axios.get(`/trending/movie/day`, {\n//     params: {\n//       api_key: API_KEY,\n//       language: \"en\",\n//       page: currentPage,\n//     },\n//   });\n//   return response.data;\n// }\n\n// function fetchMovieQuery () {\n//   const response =  axios.get(`/search/movie/`, {\n//     params: {\n//       api_key: API_KEY,\n//       language: \"en\",\n//       query: searchQuery,\n//       page: currentPage,\n//     },\n//   });\n//   return response.data;\n// }\n\n\n// function fetchMovieByID(id) {\n//   const response =  axios.get(`/movie/${id}`, {\n//     params: {\n//       api_key: API_KEY,\n//       language: \"en\",\n//     },\n//   });\n//   return response.data;\n// }\n\n// function fetchMovieByCredit(id) {\n//   const response = axios.get(`/movie/${id}/credit`, {\n//     params: {\n//       api_key: API_KEY,\n//       language: \"en\",\n//     },\n//   });\n//   return response.data;\n// }\n\n// function fetchMovieByReviews(id) {\n//   const response = axios.get(`/movie/${id}/reviews`, {\n//     params: {\n//       api_key: API_KEY,\n//       language: \"en\",\n//     },\n//   });\n//   return response.data;\n// }\n\n\n// export const getTrendDayMovies = () => {\n//   return Promise.resolve(fetchTrendDayMovies());\n// };\n\n// export const getMovieQuery = () => {\n//   return Promise.resolve(fetchMovieQuery());\n// };\n\n\n// export const gethMovieByID = id => {\n//   return Promise.resolve(fetchMovieByID.find(movie => movie.id === id));\n// };\n\n// export const gethMovieByCredit = () => {\n//   return Promise.resolve(fetchMovieByCredit());\n// };\n\n\n// export const getMovieByReviews = () => {\n//   return Promise.resolve(fetchMovieByReviews());\n// };\n\n\n\n\n\n\n\n\n\n\n\n// =====================================================\n\n// const db = {\n//     invoices: [\n//       {\n//         id: '172987',\n//         recipient: 'Jacob Mercer',\n//         account: 20138714,\n//         total: 8000,\n//         date: {\n//           created: '2011-10-05T14:48:00.000Z',\n//           due: '2011-10-12T00:00:00.000Z',\n//         },\n//       },\n//       {\n//         id: '173851',\n//         recipient: 'Adrian Cross',\n//         account: 30986127,\n//         total: 11000,\n//         date: {\n//           created: '2017-07-01T12:18:00.000Z',\n//           due: '2017-08-14T00:00:00.000Z',\n//         },\n//       },\n//       {\n//         id: '186541',\n//         recipient: 'Solomon Fokes',\n//         account: 78615230,\n//         total: 82000,\n//         date: {\n//           created: '2019-03-17T10:12:00.000Z',\n//           due: '2019-04-02T00:00:00.000Z',\n//         },\n//       },\n//       {\n//         id: '185744',\n//         recipient: 'Artemis Tau',\n//         account: 82719051,\n//         total: 17000,\n//         date: {\n//           created: '2022-09-28T10:57:00.000Z',\n//           due: '2022-11-02T00:00:00.000Z',\n//         },\n//       },\n//     ],\n\n//     customers: [\n//       { id: 1, name: 'Mischa Hopkins' },\n//       { id: 2, name: 'Anis Cresswell' },\n//       { id: 3, name: 'Milla Wagner' },\n//       { id: 4, name: 'Faizan Gillespie' },\n//       { id: 5, name: 'Roy Mays' },\n//       { id: 6, name: 'Leanne Knott' },\n//       { id: 7, name: 'Debbie Fitzgerald' },\n//       { id: 8, name: 'Phebe Reyes' },\n//       { id: 9, name: 'Lola-Mae Kouma' },\n//       { id: 10, name: 'Krish Marsh' },\n//       { id: 11, name: 'Sienna Rodgers' },\n//       { id: 12, name: 'Harper-Rose Schroeder' },\n//       { id: 13, name: 'Pippa Gill' },\n//       { id: 14, name: 'Effie Shaffer' },\n//       { id: 15, name: 'Eshal Nixon' },\n//       { id: 16, name: 'Phyllis Dunlop' },\n//       { id: 17, name: 'Efe Valenzuela' },\n//       { id: 18, name: 'Roman Mcleod' },\n//       { id: 19, name: 'Mikayla Ibarra' },\n//       { id: 20, name: 'Fatma Yu' },\n//     ],\n//   };\n  \n//   export const getInvoices = () => {\n//     return Promise.resolve(db.invoices);\n//   };\n  \n//   export const getInvoiceById = invoiceId => {\n//     return Promise.resolve(db.invoices.find(invoice => invoice.id === invoiceId));\n//   };\n\n\n//   export const getCustomers = () => {\n//     return Promise.resolve(db.customers);\n//   };\n  \n//   export const getCustomerById = id => {\n//     return Promise.resolve(db.customers.find(customer => customer.id === id));\n//   };\n\n  ","\nimport  MoviesApi  from 'fakeApi';\nimport { useEffect, useState } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n\n\nconst Home = () => {\n\n  const location = useLocation();\n  const [movies, setMovies] = useState([]);\n\n\n\n  useEffect(() => {\n    MoviesApi.fetchTrendDayMovies.then(setMovies);\n  }, []);\n\n\n\n  return (\n    <main>\n      {movies.length > 0 && (\n        <>\n        <h2>Tranding today</h2>\n        <ul>\n          {movies.map(movie => (\n            <li key={movie.id}>\n                - <Link to={`${movie.id}`} state={{ from: location}} >{movie.name}</Link></li>\n          ))}\n        </ul>\n        </>\n      )}\n    </main>\n  );\n};\n\nexport default Home;\n"],"names":["API_KEY","handlerGenres","genres","results","other","object","genre_str","genre_ids","map","elem","find","genre","id","name","axios","MoviesApi","this","constructor","fetchGendresMovie","params","api_key","language","page","response","data","query","newSearhQuery","newPage","location","useLocation","useState","movies","setMovies","useEffect","length","movie","to","state","from"],"sourceRoot":""}