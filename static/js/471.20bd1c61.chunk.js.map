{"version":3,"file":"static/js/471.20bd1c61.chunk.js","mappings":"oPAEMA,EAAU,mCAIhBC,IAAAA,SAAAA,QALgB,+BAOT,IAAMC,EAAsB,WACjC,OAAOD,IAAAA,IAAA,sBAAiC,CACtCE,OAAQ,CACNC,QAASJ,EACTK,SAAU,KACVC,KAAM,KAEPC,MAAK,SAACC,GAAD,OAAYA,EAASC,KAAKC,OAA1B,GAET,EAGYC,EAAe,mCAAG,WAAOC,GAAP,uFAENX,IAAAA,IAAA,iBAA4B,CACjDE,OAAQ,CACNC,QAASJ,EACTK,SAAU,KACVQ,MAAOD,EACPN,KAAM,KAPmB,cAEvBE,EAFuB,yBAUtBA,EAASC,KAAKC,SAVQ,2CAAH,qD,6GChBfI,EAAY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAQ1B,OACE,kBAAMA,SAPW,SAACC,GAClBA,EAAEC,iBACFF,EAASC,EAAEE,OAAOC,SAASC,UAAUC,OACrCL,EAAEE,OAAOI,OACV,EAG+BC,UAAU,aAAxC,WACA,oBAAQC,KAAK,SAASD,UAAU,oBAAhC,WACA,SAAC,MAAD,KACE,iBAAMA,UAAU,0BAAhB,wBAGF,kBACEA,UAAU,mBACVC,KAAK,OACLC,KAAK,YACLC,aAAa,MACbC,WAAS,EACTC,YAAY,oBAKjB,E,wCC6BD,EAnDe,WACb,IAAMC,GAAWC,EAAAA,EAAAA,MAEjB,GAA6BC,EAAAA,EAAAA,UAAS,IAAtC,eAAOX,EAAP,KAAkBY,EAAlB,KACA,GAA4BD,EAAAA,EAAAA,UAAS,IAArC,eAAOE,EAAP,KAAeC,EAAf,KA2BA,OARAC,EAAAA,EAAAA,YAAU,WACJf,IACJT,EAAAA,EAAAA,IAAgBS,GAAWb,KAAK2B,EAEjC,GAAE,CAACd,KAKF,6BACE,SAACN,EAAD,CACEC,SAxBe,SAAAF,GAGnB,GAAqB,KAAjBA,EAAMuB,OACR,OAAOC,EAAAA,GAAAA,MAAY,mKAErBL,EAAQnB,EACT,IAmBIoB,EAAOK,OAAS,IACf,wBACGL,EAAOM,KAAI,SAAAC,GAAK,OACf,eAAmBA,MAAOA,EAA1B,UACE,SAAC,KAAD,CAAMC,GAAE,UAAKD,EAAME,IAAMC,MAAO,CAAEC,KAAMf,GAAxC,SACGW,EAAMK,SAFFL,EAAME,GADA,QAW1B,C","sources":["fakeApi.jsx","components/SearchBox.jsx","pages/Movies.jsx"],"sourcesContent":["import axios from \"axios\";\nconst API_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'a620a6416fb18e40f7d335c64c3f9e0e';\n\n\n\naxios.defaults.baseURL = API_URL;\n\nexport const fetchTrendDayMovies = () => {\n  return axios.get(`/trending/movie/day`, {\n    params: {\n      api_key: API_KEY,\n      language: \"en\",\n      page: 1,\n    },\n  }).then((response)=>response.data.results)\n \n}\n\n\nexport const fetchMovieQuery = async (searchQuery) => {\n  \n  const response = await axios.get(`/search/movie/`, {\n    params: {\n      api_key: API_KEY,\n      language: \"en\",\n      query: searchQuery,\n      page: 1,\n    },\n  })\n  return response.data.results\n}\n\n\nexport const fetchMovieByID = (id) => {\n  return axios.get(`/movie/${id}`, {\n    params: {\n      api_key: API_KEY,\n      language: \"en\",\n    },\n  }).then((response)=>response.data.results)\n}\n\nexport const fetchMovieByCredit = (id) => {\n  return axios.get(`/movie/${id}/credit`, {\n    params: {\n      api_key: API_KEY,\n      language: \"en\",\n    },\n  }).then((response)=>response.data.results)\n}\n\nexport const fetchMovieByReviews = (id) => {\n  return axios.get(`/movie/${id}/reviews`, {\n    params: {\n      api_key: API_KEY,\n      language: \"en\",\n    },\n  }).then((response)=>response.data.results)\n}\n\n\n// export const getTrendDayMovies = () => {\n//   return Promise.resolve(fetchTrendDayMovies());\n// };\n\n// export const getMovieQuery = () => {\n//   return Promise.resolve(fetchMovieQuery());\n// };\n\n\n// export const gethMovieByID = id => {\n//   return Promise.resolve(fetchMovieByID.find(movie => movie.id === id));\n// };\n\n// export const gethMovieByCredit = () => {\n//   return Promise.resolve(fetchMovieByCredit());\n// };\n\n\n// export const getMovieByReviews = () => {\n//   return Promise.resolve(fetchMovieByReviews());\n// };\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// function handlerGenres ({results, ...other}, genres) {\n//   for (const object of results) {\n//     object.genre_str = object.genre_ids.map(elem => genres.find(genre =>  genre.id === elem).name);\n//   }\n//   return ({...other, results})\n// }\n\n// class MoviesApi {\n\n//   static genres = null;\n//   static async fetchGendresMovie() {\n//       const response = await axios.get(\"/genre/movie/list\", {\n//         params: {\n//           api_key: API_KEY,\n//         },\n//       });\n//       this.genres = response.data.genres;\n//     }\n\n\n//   #searchQuery;\n//   #currentPage;\n\n//   constructor () {\n//       this.#searchQuery = null;\n//       this.#currentPage = 1;\n\n//       this.constructor.fetchGendresMovie();\n//   }\n\n\n//   async fetchTrendDayMovies() {\n//     const response = await axios.get(`/trending/movie/day`, {\n//       params: {\n//         api_key: API_KEY,\n//         language: \"en\",\n//         page: this.#currentPage,\n//       },\n//     });\n//     return handlerGenres(response.data, MoviesApi.genres);\n//   }\n\n//   async fetchMovieByID(id) {\n//     const response = await axios.get(`/movie/${id}`, {\n//       params: {\n//         api_key: API_KEY,\n//         language: \"en\",\n//       },\n//     });\n//     return response.data;\n//   }\n\n//   async fetchMovieQuery () {\n//     const response = await axios.get(`/search/movie/`, {\n//       params: {\n//         api_key: API_KEY,\n//         language: \"en\",\n//         query: this.#searchQuery,\n//         page: this.#currentPage,\n//       },\n//     });\n//     return handlerGenres(response.data, MoviesApi.genres);\n//   }\n\n// async fetchMovieByCredit(id) {\n//   const response = await axios.get(`/movie/${id}/credit`, {\n//     params: {\n//       api_key: API_KEY,\n//       language: \"en\",\n//     },\n//   });\n//   return response.data;\n// }\n\n// async fetchMovieByReviews(id) {\n//   const response = await axios.get(`/movie/${id}/reviews`, {\n//     params: {\n//       api_key: API_KEY,\n//       language: \"en\",\n//     },\n//   });\n//   return response.data;\n// }\n\n//   get query() {\n//     return this.#searchQuery\n//   }\n\n//   set query(newSearhQuery) {\n//     this.#searchQuery = newSearhQuery;\n//     this.#currentPage = 1;\n//   }\n\n//   nextPage() {\n//     this.#currentPage += 1;\n//   }\n\n//   previousPage() {\n//     if (!(this.#currentPage - 1)){\n//       return\n//     }\n    \n//     this.#currentPage -= 1;\n//   }\n\n//   get currentpage() {\n//     return this.#currentPage\n//   }\n\n//   set currentpage(newPage) {\n//     this.#currentPage = newPage;\n//   }\n\n//   get genres() {\n//     return MoviesApi.genres;\n//   }\n\n//   set genres (genre) {\n//       return\n//   }\n\n  \n// }\n\n// export default MoviesApi;\n\n\n// ====================================================\n\n\n// import axios from \"axios\";\n// const API_URL = 'https://api.themoviedb.org/3';\n// const API_KEY = 'a620a6416fb18e40f7d335c64c3f9e0e';\n\n// const searchQuery = null;\n// const currentPage = 1;\n\n// axios.defaults.baseURL = API_URL;\n\n\n// // function handlerGenres ({results, ...other}, genres) {\n// //   for (const object of results) {\n// //     object.genre_str = object.genre_ids.map(elem => genres.find(genre =>  genre.id === elem).name);\n// //   }\n// //   return ({...other, results})\n// // }\n\n// function  fetchTrendDayMovies() {\n//   const response = axios.get(`/trending/movie/day`, {\n//     params: {\n//       api_key: API_KEY,\n//       language: \"en\",\n//       page: currentPage,\n//     },\n//   });\n//   return response.data;\n// }\n\n// function fetchMovieQuery () {\n//   const response =  axios.get(`/search/movie/`, {\n//     params: {\n//       api_key: API_KEY,\n//       language: \"en\",\n//       query: searchQuery,\n//       page: currentPage,\n//     },\n//   });\n//   return response.data;\n// }\n\n\n// function fetchMovieByID(id) {\n//   const response =  axios.get(`/movie/${id}`, {\n//     params: {\n//       api_key: API_KEY,\n//       language: \"en\",\n//     },\n//   });\n//   return response.data;\n// }\n\n// function fetchMovieByCredit(id) {\n//   const response = axios.get(`/movie/${id}/credit`, {\n//     params: {\n//       api_key: API_KEY,\n//       language: \"en\",\n//     },\n//   });\n//   return response.data;\n// }\n\n// function fetchMovieByReviews(id) {\n//   const response = axios.get(`/movie/${id}/reviews`, {\n//     params: {\n//       api_key: API_KEY,\n//       language: \"en\",\n//     },\n//   });\n//   return response.data;\n// }\n\n\n// export const getTrendDayMovies = () => {\n//   return Promise.resolve(fetchTrendDayMovies());\n// };\n\n// export const getMovieQuery = () => {\n//   return Promise.resolve(fetchMovieQuery());\n// };\n\n\n// export const gethMovieByID = id => {\n//   return Promise.resolve(fetchMovieByID.find(movie => movie.id === id));\n// };\n\n// export const gethMovieByCredit = () => {\n//   return Promise.resolve(fetchMovieByCredit());\n// };\n\n\n// export const getMovieByReviews = () => {\n//   return Promise.resolve(fetchMovieByReviews());\n// };\n\n\n\n\n\n// =====================================================\n\n// const db = {\n//     invoices: [\n//       {\n//         id: '172987',\n//         recipient: 'Jacob Mercer',\n//         account: 20138714,\n//         total: 8000,\n//         date: {\n//           created: '2011-10-05T14:48:00.000Z',\n//           due: '2011-10-12T00:00:00.000Z',\n//         },\n//       },\n//       {\n//         id: '173851',\n//         recipient: 'Adrian Cross',\n//         account: 30986127,\n//         total: 11000,\n//         date: {\n//           created: '2017-07-01T12:18:00.000Z',\n//           due: '2017-08-14T00:00:00.000Z',\n//         },\n//       },\n//       {\n//         id: '186541',\n//         recipient: 'Solomon Fokes',\n//         account: 78615230,\n//         total: 82000,\n//         date: {\n//           created: '2019-03-17T10:12:00.000Z',\n//           due: '2019-04-02T00:00:00.000Z',\n//         },\n//       },\n//       {\n//         id: '185744',\n//         recipient: 'Artemis Tau',\n//         account: 82719051,\n//         total: 17000,\n//         date: {\n//           created: '2022-09-28T10:57:00.000Z',\n//           due: '2022-11-02T00:00:00.000Z',\n//         },\n//       },\n//     ],\n\n//     customers: [\n//       { id: 1, name: 'Mischa Hopkins' },\n//       { id: 2, name: 'Anis Cresswell' },\n//       { id: 3, name: 'Milla Wagner' },\n//       { id: 4, name: 'Faizan Gillespie' },\n//       { id: 5, name: 'Roy Mays' },\n//       { id: 6, name: 'Leanne Knott' },\n//       { id: 7, name: 'Debbie Fitzgerald' },\n//       { id: 8, name: 'Phebe Reyes' },\n//       { id: 9, name: 'Lola-Mae Kouma' },\n//       { id: 10, name: 'Krish Marsh' },\n//       { id: 11, name: 'Sienna Rodgers' },\n//       { id: 12, name: 'Harper-Rose Schroeder' },\n//       { id: 13, name: 'Pippa Gill' },\n//       { id: 14, name: 'Effie Shaffer' },\n//       { id: 15, name: 'Eshal Nixon' },\n//       { id: 16, name: 'Phyllis Dunlop' },\n//       { id: 17, name: 'Efe Valenzuela' },\n//       { id: 18, name: 'Roman Mcleod' },\n//       { id: 19, name: 'Mikayla Ibarra' },\n//       { id: 20, name: 'Fatma Yu' },\n//     ],\n//   };\n  \n//   export const getInvoices = () => {\n//     return Promise.resolve(db.invoices);\n//   };\n  \n//   export const getInvoiceById = invoiceId => {\n//     return Promise.resolve(db.invoices.find(invoice => invoice.id === invoiceId));\n//   };\n\n\n//   export const getCustomers = () => {\n//     return Promise.resolve(db.customers);\n//   };\n  \n//   export const getCustomerById = id => {\n//     return Promise.resolve(db.customers.find(customer => customer.id === id));\n//   };\n\n  ","import { ImSearch } from 'react-icons/im';\nimport 'components/Styles/styles.css';\n\n\nexport const SearchBox = ({ onSubmit }) => {\n\n  const onSubmitForm=(e)=>{\n    e.preventDefault();\n    onSubmit(e.target.elements.movieName.value);\n    e.target.reset()\n  }\n\n  return (\n    <form onSubmit={onSubmitForm} className=\"SearchForm\">\n    <button type=\"submit\" className=\"SearchForm-button\">\n    <ImSearch />\n      <span className=\"SearchForm-button-label\">Search</span>\n    </button>\n\n    <input\n      className=\"SearchForm-input\"\n      type=\"text\"\n      name=\"movieName\"\n      autoComplete=\"off\"\n      autoFocus\n      placeholder=\"Search movies\"\n    />\n  </form>\n\n  );\n};\n\n\n\n\n\n","import { toast } from 'react-toastify';\n\nimport { SearchBox } from 'components/SearchBox';\nimport { fetchMovieQuery } from 'fakeApi';\nimport { useEffect, useState } from 'react';\n// import { useSearchParams } from 'react-router-dom';\nimport { Link, useLocation } from 'react-router-dom';\n\nconst Movies = () => {\n  const location = useLocation();\n\n  const [movieName, setName] = useState('');\n  const [movies, setMovies] = useState([]);\n  // const [searchParams, setSearchParams] = useSearchParams();\n\n  \n\n\n  const handleSubmit = query => {\n\n\n    if (query.trim() === '') {\n      return toast.error('Введите название изображения!');\n    }\n    setName(query);\n  };\n\n\n\n\n\n  useEffect(() => {\n    if (movieName) {\n    fetchMovieQuery(movieName).then(setMovies);\n    }\n  }, [movieName]);\n\n  // Как работает useEffect: Если hitName изменятся, запустятся все фунции вложенные в useEffect\n\n  return (\n    <main>\n      <SearchBox\n        onSubmit={handleSubmit}\n      />\n      {movies.length > 0 && (\n        <ul>\n          {movies.map(movie => (\n            <li key={movie.id} movie={movie}>\n              <Link to={`${movie.id}`} state={{ from: location }  }>\n                {movie.title}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      )}\n    </main>\n  );\n};\n\nexport default Movies;\n\n"],"names":["API_KEY","axios","fetchTrendDayMovies","params","api_key","language","page","then","response","data","results","fetchMovieQuery","searchQuery","query","SearchBox","onSubmit","e","preventDefault","target","elements","movieName","value","reset","className","type","name","autoComplete","autoFocus","placeholder","location","useLocation","useState","setName","movies","setMovies","useEffect","trim","toast","length","map","movie","to","id","state","from","title"],"sourceRoot":""}