{"version":3,"file":"static/js/267.82004ff9.chunk.js","mappings":"oQAGaA,EAAY,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAO1C,OACE,kBAAMC,GAAG,cAAcF,SAPJ,SAAAG,GACnBA,EAAEC,iBACFJ,EAASG,EAAEE,OAAOC,SAASC,UAAUR,OACrCI,EAAEE,OAAOG,OACV,EAGgDC,UAAU,aAAzD,WACE,oBAAQC,KAAK,SAASD,UAAU,oBAAhC,WACE,SAAC,MAAD,KACA,iBAAMA,UAAU,0BAAhB,wBAGF,kBACEA,UAAU,mBACVC,KAAK,OACLC,KAAK,YACLC,aAAa,MACbC,WAAS,EACTC,YAAY,gBACZb,SAAU,SAAAc,GAAK,OAAId,EAASc,EAAMV,OAAON,MAAMiB,cAAhC,EACfjB,MAAOA,MAId,E,kDCmED,EApFe,WAAO,IAAD,EACbkB,GAAWC,EAAAA,EAAAA,MAEjB,GAA6BC,EAAAA,EAAAA,UAAS,IAAtC,eAAOZ,EAAP,KAAkBa,EAAlB,KACA,GAA4BD,EAAAA,EAAAA,UAAS,IAArC,eAAOE,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAc,UAAGF,EAAaG,IAAI,eAApB,QAA+B,GAC7CC,EAAUC,OAAOZ,SAASa,OAAOC,MAAM,KAAK,IAElDC,EAAAA,EAAAA,YAAU,YACHzB,GAAcqB,IAQnBK,EALK1B,GACWqB,EAOjB,GAAE,CAACrB,IAEJ,IAAM0B,EAAa,mCAAG,WAAM9B,GAAN,wFACD+B,EAAAA,EAAAA,IAAgB/B,GADf,OACdgC,EADc,OAEpBb,EAAUa,GAFU,2CAAH,uDAYnBH,EAAAA,EAAAA,YAAU,YACR,iBAAC,wFACKzB,EADL,iCAEwB2B,EAAAA,EAAAA,IAAgB3B,GAFxC,OAES6B,EAFT,OAGGd,EAAUc,GAHb,0CAAD,EAMD,GAAE,CAAC7B,IAeJ,OACE,UAAE8B,EAAA,EAAF,CAAMC,gBAAgB,YAAtB,WACE,SAACxC,EAAD,CACEE,SAhCe,SAAAuC,GACnB,GAAqB,KAAjBA,EAAMC,OACR,OAAOC,EAAAA,GAAAA,MAAY,mKAErBrB,EAAQmB,EACT,EA4BKtC,SATW,SAAAU,GAEfc,EAD+B,KAATd,EAAc,CAAEA,KAAAA,GAAS,CAAC,EAEjD,EAOKZ,MAAO2B,IAERL,EAAOqB,OAAS,IACf,SAACL,EAAA,EAAD,CAAKM,GAAG,KAAKC,QAAQ,OAAOC,SAAS,OAAOC,eAAe,SAA3D,SACGzB,EAAO0B,KAAI,SAAAC,GAAK,OACf,SAACX,EAAA,EAAD,CAAKM,GAAG,KAAqBK,MAAOA,EAAQC,OAAO,OAAnD,UACE,UAAC,KAAD,CAAMC,GAAE,kBAAaF,EAAM9C,IAAMiD,MAAO,CAAEC,KAAMnC,GAAYR,UAAU,OAAtE,WACA,SAAC4B,EAAA,EAAD,CAAKM,GAAG,MAAMU,IAAKL,EAAMM,YAAcC,EAAAA,GAAUP,EAAMM,YAAcE,EAAAA,GAASC,IAAKT,EAAMU,MAAOC,MAAM,MAAMC,aAAa,OAAOC,aAAa,SAC1Ib,EAAMU,UAHOV,EAAM9C,GADT,OAWrB,SAAC,EAAA4D,SAAD,CAAUC,SAAU,KAApB,UACE,SAAC,KAAD,QAIP,C","sources":["components/SearchBox.jsx","pages/Movies.jsx"],"sourcesContent":["import { ImSearch } from 'react-icons/im';\nimport 'components/Styles/styles.css';\n\nexport const SearchBox = ({value, onSubmit, onChange }) => {\n  const onSubmitForm = e => {\n    e.preventDefault();\n    onSubmit(e.target.elements.movieName.value);\n    e.target.reset();\n  };\n\n  return (\n    <form id=\"search-form\" onSubmit={onSubmitForm} className=\"SearchForm\">\n      <button type=\"submit\" className=\"SearchForm-button\">\n        <ImSearch />\n        <span className=\"SearchForm-button-label\">Search</span>\n      </button>\n\n      <input\n        className=\"SearchForm-input\"\n        type=\"text\"\n        name=\"movieName\"\n        autoComplete=\"off\"\n        autoFocus\n        placeholder=\"Search movies\"\n        onChange={event => onChange(event.target.value.toLowerCase())}\n        value={value}\n      />\n    </form>\n  );\n};\n","import { toast } from 'react-toastify';\n\nimport { SearchBox } from 'components/SearchBox';\nimport { fetchMovieQuery, API_IMG, DEF_IMG  } from 'fakeApi';\nimport { useEffect, useState } from 'react';\n\nimport { Link, Outlet, useLocation, useSearchParams } from 'react-router-dom';\nimport { Suspense } from 'react';\n\nimport \"../components/Styles/styles.css\";\nimport { Box } from '../components/Box';\n\nconst Movies = () => {\n  const location = useLocation();\n\n  const [movieName, setName] = useState('');\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const valueMovieName = searchParams.get('name') ?? '';\n  const histori = window.location.search.split('=')[1];\n\n  useEffect(() => {\n    if (!movieName && !histori) {\n      return;\n    }\n    if (!movieName) {\n      getFetchQuery(histori);\n      return;\n    }\n\n    getFetchQuery(movieName);\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [movieName]);\n\n  const getFetchQuery = async e => {\n    const data = await fetchMovieQuery(e);\n    setMovies(data);\n  };\n\n  const handleSubmit = query => {\n    if (query.trim() === '') {\n      return toast.error('Введите название изображения!');\n    }\n    setName(query);\n  };\n\n  useEffect(() => {\n    (async () => {\n      if (movieName) {\n        const result = await fetchMovieQuery(movieName);\n        setMovies(result);\n      }\n    })();\n  }, [movieName]);\n\n  // useEffect(() => {\n  //   if (movieName) {\n  //     fetchMovieQuery(movieName).then(setMovies);\n  //   }\n  // }, [movieName]);\n\n  // Как работает useEffect: Если hitName изменятся, запустятся все фунции вложенные в useEffect\n\n  const onChange = name => {\n    const nextValueName = name !== '' ? { name } : {};\n    setSearchParams(nextValueName);\n  };\n\n  return (\n    < Box backgroundColor=\"#403f9d36\" >\n      <SearchBox\n        onSubmit={handleSubmit}\n        onChange={onChange}\n        value={valueMovieName}\n      />\n      {movies.length > 0 && (\n        <Box as=\"ul\" display=\"flex\" flexWrap=\"wrap\" justifyContent=\"center\">\n          {movies.map(movie => (\n            <Box as=\"li\" key={movie.id}  movie={movie}  margin=\"10px\" >\n              <Link to={`/movies/${movie.id}`} state={{ from: location }} className=\"item\" >\n              <Box as=\"img\" src={movie.poster_path ? API_IMG + movie.poster_path : DEF_IMG} alt={movie.title} width=\"400\" borderRadius=\"10px\" marginBottom=\"20px\"/>\n                {movie.title}\n              </Link>\n            </Box>\n          ))}\n        </Box>\n      )}\n\n      <Suspense fallback={null}>\n        <Outlet />\n      </Suspense>\n    </Box >\n  );\n};\n\nexport default Movies;\n"],"names":["SearchBox","value","onSubmit","onChange","id","e","preventDefault","target","elements","movieName","reset","className","type","name","autoComplete","autoFocus","placeholder","event","toLowerCase","location","useLocation","useState","setName","movies","setMovies","useSearchParams","searchParams","setSearchParams","valueMovieName","get","histori","window","search","split","useEffect","getFetchQuery","fetchMovieQuery","data","result","Box","backgroundColor","query","trim","toast","length","as","display","flexWrap","justifyContent","map","movie","margin","to","state","from","src","poster_path","API_IMG","DEF_IMG","alt","title","width","borderRadius","marginBottom","Suspense","fallback"],"sourceRoot":""}