{"version":3,"file":"static/js/267.ca52bb5e.chunk.js","mappings":"uNAEMA,EAAU,mCAKhBC,IAAAA,SAAAA,QANgB,+BA+DT,IAAMC,EAAoB,WAC/B,OAAOC,QAAQC,QAvDEH,IAAAA,IAAA,sBAAiC,CAChDI,OAAQ,CACNC,QAASN,EACTO,SAAU,KACVC,KATc,KAYFC,KAiDjB,EAEYC,EAAgB,WAC3B,OAAOP,QAAQC,QAhDGH,IAAAA,IAAA,iBAA4B,CAC5CI,OAAQ,CACNC,QAASN,EACTO,SAAU,KACVI,MArBc,KAsBdH,KArBc,KAwBFC,KAyCjB,C,0FCtEYG,EAAY,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACjC,OACE,0BACE,kBACEC,KAAK,OACLF,MAAOA,EACPC,SAAU,SAAAE,GAAC,OAAIF,EAASE,EAAEC,OAAOJ,MAAtB,EACXK,YAAY,iGAInB,E,wCCiCD,EArCe,WAAO,IAAD,EAEbC,GAAWC,EAAAA,EAAAA,MACjB,GAAkCC,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAW,UAAGF,EAAaG,IAAI,iBAApB,QAAiC,IAElDC,EAAAA,EAAAA,YAAU,WACRnB,EAAAA,GAAAA,KAAmBa,EACpB,GAAE,IAEH,IAKMO,GAAmBC,EAAAA,EAAAA,UAAQ,WAC/B,OAAOT,EAAUU,QAAO,SAAAC,GAAQ,OAC9BA,EAASC,KAAKC,cAAcC,SAAST,EAAYQ,cADnB,GAGjC,GAAE,CAACb,EAAWK,IAEf,OACE,6BACE,SAACf,EAAD,CAAWC,MAAOc,EAAab,SAbd,SAAAD,GACnBa,EAA0B,KAAVb,EAAe,CAAEmB,OAAQnB,GAAU,CAAC,EACrD,IAYIS,EAAUe,OAAS,IAClB,wBACGP,EAAiBQ,KAAI,SAAAL,GAAQ,OAC5B,yBACI,SAAC,KAAD,CAAMM,GAAE,UAAKN,EAASO,IAAMC,MAAO,CAAEC,KAAMvB,GAA3C,SAAwDc,EAASC,QAD5DD,EAASO,GADU,QAQvC,C","sources":["fakeApi.jsx","components/SearchBox.jsx","pages/Movies.jsx"],"sourcesContent":["import axios from \"axios\";\nconst API_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'a620a6416fb18e40f7d335c64c3f9e0e';\n\nconst searchQuery = null;\nconst currentPage = 1;\n\naxios.defaults.baseURL = API_URL;\n\nfunction  fetchTrendDayMovies() {\n  const response = axios.get(`/trending/movie/day`, {\n    params: {\n      api_key: API_KEY,\n      language: \"en\",\n      page: currentPage,\n    },\n  });\n  return response.data;\n}\n\nfunction fetchMovieQuery () {\n  const response =  axios.get(`/search/movie/`, {\n    params: {\n      api_key: API_KEY,\n      language: \"en\",\n      query: searchQuery,\n      page: currentPage,\n    },\n  });\n  return response.data;\n}\n\n\nfunction fetchMovieByID(id) {\n  const response =  axios.get(`/movie/${id}`, {\n    params: {\n      api_key: API_KEY,\n      language: \"en\",\n    },\n  });\n  return response.data;\n}\n\nfunction fetchMovieByCredit(id) {\n  const response = axios.get(`/movie/${id}/credit`, {\n    params: {\n      api_key: API_KEY,\n      language: \"en\",\n    },\n  });\n  return response.data;\n}\n\nfunction fetchMovieByReviews(id) {\n  const response = axios.get(`/movie/${id}/reviews`, {\n    params: {\n      api_key: API_KEY,\n      language: \"en\",\n    },\n  });\n  return response.data;\n}\n\n\nexport const getTrendDayMovies = () => {\n  return Promise.resolve(fetchTrendDayMovies());\n};\n\nexport const getMovieQuery = () => {\n  return Promise.resolve(fetchMovieQuery());\n};\n\n\nexport const gethMovieByID = id => {\n  return Promise.resolve(fetchMovieByID.find(movie => movie.id === id));\n};\n\nexport const gethMovieByCredit = () => {\n  return Promise.resolve(fetchMovieByCredit());\n};\n\n\nexport const getMovieByReviews = () => {\n  return Promise.resolve(fetchMovieByReviews());\n};\n\n\n\n// function handlerGenres ({results, ...other}, genres) {\n//   for (const object of results) {\n//     object.genre_str = object.genre_ids.map(elem => genres.find(genre =>  genre.id === elem).name);\n//   }\n//   return ({...other, results})\n// }\n\n// class MoviesApi {\n\n//   static genres = null;\n//   static async fetchGendresMovie() {\n//       const response = await axios.get(\"/genre/movie/list\", {\n//         params: {\n//           api_key: API_KEY,\n//         },\n//       });\n//       this.genres = response.data.genres;\n//     }\n\n\n//   #searchQuery;\n//   #currentPage;\n\n//   constructor () {\n//       this.#searchQuery = null;\n//       this.#currentPage = 1;\n\n//       this.constructor.fetchGendresMovie();\n//   }\n\n\n//   async fetchTrendDayMovies() {\n//     const response = await axios.get(`/trending/movie/day`, {\n//       params: {\n//         api_key: API_KEY,\n//         language: \"en\",\n//         page: this.#currentPage,\n//       },\n//     });\n//     return handlerGenres(response.data, MoviesApi.genres);\n//   }\n\n//   async fetchMovieByID(id) {\n//     const response = await axios.get(`/movie/${id}`, {\n//       params: {\n//         api_key: API_KEY,\n//         language: \"en\",\n//       },\n//     });\n//     return response.data;\n//   }\n\n//   async fetchMovieQuery () {\n//     const response = await axios.get(`/search/movie/`, {\n//       params: {\n//         api_key: API_KEY,\n//         language: \"en\",\n//         query: this.#searchQuery,\n//         page: this.#currentPage,\n//       },\n//     });\n//     return handlerGenres(response.data, MoviesApi.genres);\n//   }\n\n// async fetchMovieByCredit(id) {\n//   const response = await axios.get(`/movie/${id}/credit`, {\n//     params: {\n//       api_key: API_KEY,\n//       language: \"en\",\n//     },\n//   });\n//   return response.data;\n// }\n\n// async fetchMovieByReviews(id) {\n//   const response = await axios.get(`/movie/${id}/reviews`, {\n//     params: {\n//       api_key: API_KEY,\n//       language: \"en\",\n//     },\n//   });\n//   return response.data;\n// }\n\n//   get query() {\n//     return this.#searchQuery\n//   }\n\n//   set query(newSearhQuery) {\n//     this.#searchQuery = newSearhQuery;\n//     this.#currentPage = 1;\n//   }\n\n//   nextPage() {\n//     this.#currentPage += 1;\n//   }\n\n//   previousPage() {\n//     if (!(this.#currentPage - 1)){\n//       return\n//     }\n    \n//     this.#currentPage -= 1;\n//   }\n\n//   get currentpage() {\n//     return this.#currentPage\n//   }\n\n//   set currentpage(newPage) {\n//     this.#currentPage = newPage;\n//   }\n\n//   get genres() {\n//     return MoviesApi.genres;\n//   }\n\n//   set genres (genre) {\n//       return\n//   }\n\n  \n// }\n\n// export default MoviesApi;\n\n\n// ====================================================\n\n\n// import axios from \"axios\";\n// const API_URL = 'https://api.themoviedb.org/3';\n// const API_KEY = 'a620a6416fb18e40f7d335c64c3f9e0e';\n\n// const searchQuery = null;\n// const currentPage = 1;\n\n// axios.defaults.baseURL = API_URL;\n\n\n// // function handlerGenres ({results, ...other}, genres) {\n// //   for (const object of results) {\n// //     object.genre_str = object.genre_ids.map(elem => genres.find(genre =>  genre.id === elem).name);\n// //   }\n// //   return ({...other, results})\n// // }\n\n// function  fetchTrendDayMovies() {\n//   const response = axios.get(`/trending/movie/day`, {\n//     params: {\n//       api_key: API_KEY,\n//       language: \"en\",\n//       page: currentPage,\n//     },\n//   });\n//   return response.data;\n// }\n\n// function fetchMovieQuery () {\n//   const response =  axios.get(`/search/movie/`, {\n//     params: {\n//       api_key: API_KEY,\n//       language: \"en\",\n//       query: searchQuery,\n//       page: currentPage,\n//     },\n//   });\n//   return response.data;\n// }\n\n\n// function fetchMovieByID(id) {\n//   const response =  axios.get(`/movie/${id}`, {\n//     params: {\n//       api_key: API_KEY,\n//       language: \"en\",\n//     },\n//   });\n//   return response.data;\n// }\n\n// function fetchMovieByCredit(id) {\n//   const response = axios.get(`/movie/${id}/credit`, {\n//     params: {\n//       api_key: API_KEY,\n//       language: \"en\",\n//     },\n//   });\n//   return response.data;\n// }\n\n// function fetchMovieByReviews(id) {\n//   const response = axios.get(`/movie/${id}/reviews`, {\n//     params: {\n//       api_key: API_KEY,\n//       language: \"en\",\n//     },\n//   });\n//   return response.data;\n// }\n\n\n// export const getTrendDayMovies = () => {\n//   return Promise.resolve(fetchTrendDayMovies());\n// };\n\n// export const getMovieQuery = () => {\n//   return Promise.resolve(fetchMovieQuery());\n// };\n\n\n// export const gethMovieByID = id => {\n//   return Promise.resolve(fetchMovieByID.find(movie => movie.id === id));\n// };\n\n// export const gethMovieByCredit = () => {\n//   return Promise.resolve(fetchMovieByCredit());\n// };\n\n\n// export const getMovieByReviews = () => {\n//   return Promise.resolve(fetchMovieByReviews());\n// };\n\n\n\n\n\n// =====================================================\n\n// const db = {\n//     invoices: [\n//       {\n//         id: '172987',\n//         recipient: 'Jacob Mercer',\n//         account: 20138714,\n//         total: 8000,\n//         date: {\n//           created: '2011-10-05T14:48:00.000Z',\n//           due: '2011-10-12T00:00:00.000Z',\n//         },\n//       },\n//       {\n//         id: '173851',\n//         recipient: 'Adrian Cross',\n//         account: 30986127,\n//         total: 11000,\n//         date: {\n//           created: '2017-07-01T12:18:00.000Z',\n//           due: '2017-08-14T00:00:00.000Z',\n//         },\n//       },\n//       {\n//         id: '186541',\n//         recipient: 'Solomon Fokes',\n//         account: 78615230,\n//         total: 82000,\n//         date: {\n//           created: '2019-03-17T10:12:00.000Z',\n//           due: '2019-04-02T00:00:00.000Z',\n//         },\n//       },\n//       {\n//         id: '185744',\n//         recipient: 'Artemis Tau',\n//         account: 82719051,\n//         total: 17000,\n//         date: {\n//           created: '2022-09-28T10:57:00.000Z',\n//           due: '2022-11-02T00:00:00.000Z',\n//         },\n//       },\n//     ],\n\n//     customers: [\n//       { id: 1, name: 'Mischa Hopkins' },\n//       { id: 2, name: 'Anis Cresswell' },\n//       { id: 3, name: 'Milla Wagner' },\n//       { id: 4, name: 'Faizan Gillespie' },\n//       { id: 5, name: 'Roy Mays' },\n//       { id: 6, name: 'Leanne Knott' },\n//       { id: 7, name: 'Debbie Fitzgerald' },\n//       { id: 8, name: 'Phebe Reyes' },\n//       { id: 9, name: 'Lola-Mae Kouma' },\n//       { id: 10, name: 'Krish Marsh' },\n//       { id: 11, name: 'Sienna Rodgers' },\n//       { id: 12, name: 'Harper-Rose Schroeder' },\n//       { id: 13, name: 'Pippa Gill' },\n//       { id: 14, name: 'Effie Shaffer' },\n//       { id: 15, name: 'Eshal Nixon' },\n//       { id: 16, name: 'Phyllis Dunlop' },\n//       { id: 17, name: 'Efe Valenzuela' },\n//       { id: 18, name: 'Roman Mcleod' },\n//       { id: 19, name: 'Mikayla Ibarra' },\n//       { id: 20, name: 'Fatma Yu' },\n//     ],\n//   };\n  \n//   export const getInvoices = () => {\n//     return Promise.resolve(db.invoices);\n//   };\n  \n//   export const getInvoiceById = invoiceId => {\n//     return Promise.resolve(db.invoices.find(invoice => invoice.id === invoiceId));\n//   };\n\n\n//   export const getCustomers = () => {\n//     return Promise.resolve(db.customers);\n//   };\n  \n//   export const getCustomerById = id => {\n//     return Promise.resolve(db.customers.find(customer => customer.id === id));\n//   };\n\n  ","export const SearchBox = ({ value, onChange }) => {\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={value}\n        onChange={e => onChange(e.target.value)}\n        placeholder=\"Введите название\"\n      />\n    </div>\n  );\n};\n","import { SearchBox } from 'components/SearchBox';\nimport { getMovieQuery } from 'fakeApi';\nimport { useEffect, useState, useMemo } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Link, useLocation } from 'react-router-dom';\n\n\nconst Movies = () => {\n\n  const location = useLocation();\n  const [customers, setCustomers] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const filterParam = searchParams.get('filter') ?? '';\n\n  useEffect(() => {\n    getMovieQuery.then(setCustomers);\n  }, []);\n\n  const changeFilter = value => {\n    setSearchParams(value !== '' ? { filter: value } : {});\n  };\n\n\n  const visibleCustomers = useMemo(() => {\n    return customers.filter(customer =>\n      customer.name.toLowerCase().includes(filterParam.toLowerCase())\n    );\n  }, [customers, filterParam]);\n\n  return (\n    <main>\n      <SearchBox value={filterParam} onChange={changeFilter} />\n      {customers.length > 0 && (\n        <ul>\n          {visibleCustomers.map(customer => (\n            <li key={customer.id}>\n                <Link to={`${customer.id}`} state={{ from: location}} >{customer.name}</Link></li>\n          ))}\n        </ul>\n      )}\n    </main>\n  );\n};\n\nexport default Movies;\n"],"names":["API_KEY","axios","getTrendDayMovies","Promise","resolve","params","api_key","language","page","data","getMovieQuery","query","SearchBox","value","onChange","type","e","target","placeholder","location","useLocation","useState","customers","setCustomers","useSearchParams","searchParams","setSearchParams","filterParam","get","useEffect","visibleCustomers","useMemo","filter","customer","name","toLowerCase","includes","length","map","to","id","state","from"],"sourceRoot":""}